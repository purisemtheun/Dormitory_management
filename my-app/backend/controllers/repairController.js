// controllers/repairController.js
const db = require('../config/db');

// ===== Helpers =====
function makeRepairId() {
  const now = new Date();
  const y = String(now.getFullYear()).slice(-2);
  const m = String(now.getMonth() + 1).padStart(2, '0');
  const d = String(now.getDate()).padStart(2, '0');
  const rnd = String(Math.floor(Math.random() * 1000)).padStart(3, '0');
  return `R${y}${m}${d}${rnd}`; // ‡∏¢‡∏≤‡∏ß 10 ‡∏ï‡∏±‡∏ß
}

// ‡∏£‡∏±‡∏ö 'YYYY-MM-DD' ‡∏´‡∏£‡∏∑‡∏≠ ISO ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏ô 'YYYY-MM-DD'
function toDateOnly(str) {
  if (!str) return null;
  const m = /^(\d{4})-(\d{2})-(\d{2})$/.exec(str);
  if (m) return `${m[1]}-${m[2]}-${m[3]}`;
  const d = new Date(str);
  if (isNaN(d.getTime())) return null;
  const mm = String(d.getMonth() + 1).padStart(2, '0');
  const dd = String(d.getDate()).padStart(2, '0');
  return `${d.getFullYear()}-${mm}-${dd}`;
}

// ===== Controllers =====
exports.createRepair = async (req, res) => {
  try {
    const { title, description, room_id: roomIdInput, image_url } = req.body;
    const dueRaw = req.body.due_date || req.body.deadline; // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠

    if (!req.user?.id) {
      return res.status(401).json({ error: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' });
    }
    if (!title || !description) {
      return res.status(400).json({ error: 'title ‡πÅ‡∏•‡∏∞ description ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ' });
    }

    // ‡∏´‡∏≤ tenant ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÉ‡∏ä‡πâ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
    const userId = req.user.id;
    const [tenants] = await db.query(
      'SELECT tenant_id, room_id FROM tenants WHERE user_id = ? ORDER BY checkin_date DESC LIMIT 1',
      [userId]
    );
    const tenant = tenants[0];
    if (!tenant) {
      return res.status(404).json({ error: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° tenant ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ' });
    }

    // room_id: tenant ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
    let roomId = roomIdInput || tenant.room_id || null;
    if (req.user.role === 'tenant') {
      if (!tenant.room_id) {
        return res.status(400).json({ error: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á ‡∏à‡∏∂‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ' });
      }
      if (roomId !== tenant.room_id) {
        return res.status(403).json({ error: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô' });
      }
    }
    if (!roomId) {
      return res.status(400).json({ error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ room_id' });
    }

    const dueDate = toDateOnly(dueRaw);
    if (dueRaw && !dueDate) {
      return res.status(400).json({ error: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö due_date/deadline ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD ‡∏´‡∏£‡∏∑‡∏≠ ISO ‡∏ó‡∏µ‡πà‡∏û‡∏≤‡∏£‡πå‡∏™‡πÑ‡∏î‡πâ)' });
    }

    const finalImageUrl = image_url || null;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á repair_id (‡∏Å‡∏±‡∏ô‡∏ä‡∏ô‡∏î‡πâ‡∏ß‡∏¢ UNIQUE KEY ‡∏ó‡∏µ‡πà DB)
    let repairId = makeRepairId();
    for (let i = 0; i < 3; i++) {
      try {
        await db.query(
          `INSERT INTO repairs
            (repair_id, tenant_id, description, assigned_to, status, created_at, updated_at,
             title, room_id, image_url, due_date)
           VALUES ( ?, ?, ?, NULL, 'new', NOW(), NOW(),
                    ?, ?, ?, ? )`,
          [repairId, tenant.tenant_id, description, title, roomId, finalImageUrl, dueDate]
        );
        break; // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      } catch (e) {
        if (e.code === 'ER_DUP_ENTRY') { repairId = makeRepairId(); continue; }
        throw e;
      }
    }

    return res.status(201).json({
      message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        repair_id: repairId,
        title,
        description,
        room_id: roomId,
        image_url: finalImageUrl,
        due_date: dueDate,
        status: 'new',
      },
    });
  } catch (err) {
    console.error('üî• [createRepair] error:', err);
    return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°' });
  }
};

exports.getAllRepairs = async (req, res) => {
  try {
    const { role, id: userId } = req.user;

    if (role === 'tenant') {
      const [trows] = await db.query(
        'SELECT tenant_id FROM tenants WHERE user_id = ? ORDER BY checkin_date DESC LIMIT 1',
        [userId]
      );
      const t = trows[0];
      if (!t) return res.status(404).json({ error: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° tenant ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ' });

      const [rows] = await db.query(
        `SELECT r.repair_id, r.title, r.description, r.room_id, r.image_url, r.due_date,
                r.status, r.created_at, r.updated_at, r.assigned_to,
                u.name AS technician_name
         FROM repairs r
         LEFT JOIN users u ON u.id = r.assigned_to
         WHERE r.tenant_id = ?
         ORDER BY r.created_at DESC`,
        [t.tenant_id]
      );
      return res.json(rows);
    }

    if (role === 'technician') {
      // ‚úÖ ‡∏ä‡πà‡∏≤‡∏á‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      const [rows] = await db.query(
        `SELECT r.repair_id, r.title, r.description, r.room_id, r.image_url, r.due_date,
                r.status, r.created_at, r.updated_at, r.assigned_to,
                u.name AS technician_name
         FROM repairs r
         LEFT JOIN users u ON u.id = r.assigned_to
         WHERE r.assigned_to = ?
         ORDER BY r.created_at DESC`,
        [userId]
      );
      return res.json(rows);
    }

    // admin ‚Üí ‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const [rows] = await db.query(
      `SELECT r.repair_id, r.title, r.description, r.room_id, r.image_url, r.due_date,
              r.status, r.created_at, r.updated_at, r.assigned_to,
              u.name AS technician_name
       FROM repairs r
       LEFT JOIN users u ON u.id = r.assigned_to
       ORDER BY r.created_at DESC`
    );
    return res.json(rows);
  } catch (err) {
    console.error('üî• [getAllRepairs] error:', err);
    return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°' });
  }
};


exports.getRepairById = async (req, res) => {
  try {
    const { role, id: userId } = req.user;
    const { id: repairId } = req.params;

    const [rrows] = await db.query(
      `SELECT r.repair_id, r.title, r.description, r.room_id, r.image_url, r.due_date,
              r.status, r.created_at, r.updated_at, r.tenant_id, r.assigned_to,
              u.name AS technician_name
       FROM repairs r
       LEFT JOIN users u ON u.id = r.assigned_to
       WHERE r.repair_id = ? LIMIT 1`,
      [repairId]
    );
    const repair = rrows[0];
    if (!repair) return res.status(404).json({ error: 'Repair not found' });

    if (role === 'tenant') {
      const [trows] = await db.query(
        'SELECT tenant_id FROM tenants WHERE user_id = ? ORDER BY checkin_date DESC LIMIT 1',
        [userId]
      );
      const t = trows[0];
      if (!t || repair.tenant_id !== t.tenant_id) {
        return res.status(403).json({ error: 'Forbidden' });
      }
    }

    if (role === 'technician' && repair.assigned_to !== userId) {
      return res.status(403).json({ error: 'Forbidden' });
    }

    return res.json(repair);
  } catch (err) {
    console.error('üî• [getRepairById] error:', err);
    return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ã‡πà‡∏≠‡∏°' });
  }
};

exports.assignRepair = async (req, res) => {
  try {
    const { assigned_to } = req.body;
    const { id: repairId } = req.params;
    if (!assigned_to) return res.status(400).json({ error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ assigned_to' });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
    const [urows] = await db.query('SELECT id FROM users WHERE id = ? LIMIT 1', [assigned_to]);
    if (!urows.length) return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏' });

    // ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    const [rows] = await db.query(
      'SELECT repair_id, status, assigned_to FROM repairs WHERE repair_id = ? LIMIT 1',
      [repairId]
    );
    const job = rows[0];
    if (!job) return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°' });

    // (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô) ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    // if (job.status !== 'new') {
    //   return res.status(409).json({ error: '‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ new', current_status: job.status });
    // }

    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (idempotent)
    if (job.assigned_to === Number(assigned_to)) {
      return res.status(200).json({ message: '‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)', idempotent: true });
    }

    const [result] = await db.query(
      'UPDATE repairs SET assigned_to = ?, updated_at = NOW() WHERE repair_id = ? LIMIT 1',
      [assigned_to, repairId]
    );

    if (result.affectedRows !== 1) {
      return res.status(409).json({ error: '‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)' });
    }
    return res.json({ message: '‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    console.error('üî• [assignRepair] error:', err);
    return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô' });
  }
};


exports.updateStatus = async (req, res) => {
  try {
    const { status } = req.body;
    const { id: repairId } = req.params;

    const allowed = new Set(['new', 'in_progress', 'completed', 'cancelled']);
    if (!allowed.has(status)) {
      return res.status(400).json({ error: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (new, in_progress, completed, cancelled)' });
    }

    await db.query(
      'UPDATE repairs SET status = ?, updated_at = NOW() WHERE repair_id = ?',
      [status, repairId]
    );
    return res.json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    console.error('üî• [updateStatus] error:', err);
    return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' });
  }
};

// controllers/repairController.js
exports.deleteRepair = async (req, res) => {
  try {
    // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ route ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ authorizeRoles('admin')
    if (!req.user || req.user.role !== 'admin') {
      return res.status(403).json({ error: 'Forbidden', code: 'ROLE_FORBIDDEN' });
    }

    const { id: repairId } = req.params;
    if (!repairId) {
      return res.status(400).json({ error: 'Missing repair id', code: 'BAD_REQUEST' });
    }

    const [result] = await db.query(
      'DELETE FROM repairs WHERE repair_id = ? LIMIT 1',
      [repairId]
    );

    if (result.affectedRows !== 1) {
      return res.status(404).json({ error: 'Repair not found', code: 'NOT_FOUND' });
    }

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á:
    // return res.status(204).send(); // No Content
    return res.json({ message: '‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (e) {
    console.error('üî• [deleteRepair] error:', e);
    return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°' });
  }
};

