// backend/routes/lineWebhook.js
const express = require('express');
const router = express.Router();
const db = require('../config/db');
const { verifySignature, replyMessage } = require('../services/lineService');

const WEBHOOK_PATH = process.env.LINE_WEBHOOK_PATH || '/webhooks/line';

// ‡πÉ‡∏ä‡πâ body parser ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö raw body ‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô
router.post(
  WEBHOOK_PATH,
  express.json({
    verify: (req, _res, buf) => { req.rawBody = buf; },
  }),
  async (req, res) => {
    try {
      // 1) ‡∏ï‡∏£‡∏ß‡∏à‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏î ‡πÜ
      const ok = await verifySignature(req.rawBody, req.headers['x-line-signature']);
      if (!ok) return res.status(401).end();

      const events = Array.isArray(req.body?.events) ? req.body.events : [];

      // 2) ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏∏‡∏Å‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå
      for (const ev of events) {
        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö follow ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ï‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏ö‡∏≠‡∏ó
        if (ev.type === 'follow') {
          await replyMessage(ev.replyToken, {
            type: 'text',
            text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö üëã\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå: ‡∏ú‡∏π‡∏Å <‡πÇ‡∏Ñ‡πâ‡∏î> ‡∏´‡∏£‡∏∑‡∏≠ LINK:<‡πÇ‡∏Ñ‡πâ‡∏î>',
          });
          continue;
        }

        if (ev.type !== 'message' || ev.message?.type !== 'text') {
          // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
          continue;
        }

        const text = String(ev.message.text || '').trim();
        const replyToken = ev.replyToken;
        const lineUserId = ev.source?.userId;

        // 3) ‡πÅ‡∏¢‡∏Å 2 ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: "‡∏ú‡∏π‡∏Å <code>" ‡∏´‡∏£‡∏∑‡∏≠ "LINK:<code>"
        let code = null;

        // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢: ‡∏ú‡∏π‡∏Å CODE
        const m1 = text.match(/^‡∏ú‡∏π‡∏Å\s+([A-Za-z0-9_-]{4,32})$/i);
        if (m1) code = m1[1];

        // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©: LINK:CODE
        const m2 = text.match(/^LINK:([A-Za-z0-9_-]{4,32})$/i);
        if (!code && m2) code = m2[1];

        if (!code) {
          // ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‚Üí ‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
          await replyMessage(replyToken, {
            type: 'text',
            text: '‡∏û‡∏¥‡∏°‡∏û‡πå: ‡∏ú‡∏π‡∏Å <‡πÇ‡∏Ñ‡πâ‡∏î> ‡∏´‡∏£‡∏∑‡∏≠ LINK:<‡πÇ‡∏Ñ‡πâ‡∏î> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏≠‡∏û‡∏±‡∏Å',
          });
          continue;
        }

        // 4) ‡∏ï‡∏£‡∏ß‡∏à‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á pairing_codes (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ)
        const [[p]] = await db.query(
          `SELECT code, user_id, tenant_id
             FROM pairing_codes
            WHERE code = ?
              AND (expire_at IS NULL OR expire_at > NOW())
              AND used_at IS NULL
            LIMIT 1`,
          [code]
        );

        if (!p) {
          await replyMessage(replyToken, { type: 'text', text: '‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß' });
          continue;
        }

        // 5) ‡∏ú‡∏π‡∏Å line_user_id ‡∏Å‡∏±‡∏ö tenant_id (‡πÅ‡∏•‡∏∞ user_id ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‚Äî upsert
        await db.query(
          `INSERT INTO line_links (tenant_id, user_id, line_user_id, linked_at)
           VALUES (?,?,?,NOW())
           ON DUPLICATE KEY UPDATE
             user_id = VALUES(user_id),
             line_user_id = VALUES(line_user_id),
             linked_at = NOW()`,
          [p.tenant_id, p.user_id || null, lineUserId]
        );

        // 6) mark ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
        await db.query(`UPDATE pairing_codes SET used_at = NOW() WHERE code = ?`, [code]);

        // 7) ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        await replyMessage(replyToken, {
          type: 'text',
          text: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ\n‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
        });
      }

      // LINE ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 200 ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏ß ‡πÜ
      res.json({ ok: true });
    } catch (e) {
      console.error('LINE webhook error:', e);
      // ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö 200 ‡πÅ‡∏°‡πâ‡∏à‡∏∞ fail ‡∏ö‡∏≤‡∏á event (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ LINE ‡∏£‡∏µ‡πÑ‡∏ó‡∏£‡∏ã‡πâ‡∏≥‡∏°‡∏≤‡∏Å)
      res.status(200).json({ ok: false });
    }
  }
);

module.exports = router;
