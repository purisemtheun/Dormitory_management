import React, { useEffect, useState } from "react";
import { tenantApi } from "../../services/tenant.api";


const formatDate = (s) => (s ? String(s).slice(0, 10) : "-");

export default function AdminTenantsManagePage() {
  // ===== state ‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏î‡∏¥‡∏°) =====
  const [rows, setRows] = useState([]);
  const [q, setQ] = useState("");
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState("");

  // üü¢ NEW: state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á & ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const [showCreate, setShowCreate] = useState(false);
  const [createForm, setCreateForm] = useState({
    name: "",
    phone: "",
    room_id: "",
    checkin_date: "",
  });

  const [editing, setEditing] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏£‡∏Ñ‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const [editForm, setEditForm] = useState({
    name: "",
    phone: "",
    room_id: "",
    checkin_date: "",
  });

  // ===== ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏î‡∏¥‡∏°) =====
  const load = async (query = "") => {
    setLoading(true);
    setErr("");
    try {
      const data = await tenantApi.list(query); // GET /api/admin/tenants?q=...
      setRows(Array.isArray(data) ? data : []);
    } catch (e) {
      let msg = e.message || "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
      if (e.status === 401) msg = "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï (401) ‚Äî ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•";
      if (e.status === 403) msg = "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏°‡πà‡∏û‡∏≠ (403) ‚Äî ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô";
      if (e.status === 404) msg = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á API (404) ‚Äî ‡∏ï‡∏£‡∏ß‡∏à path/‡πÄ‡∏°‡∏≤‡∏ô‡∏ï‡πå route";
      setErr(`${msg}${e.code ? ` [${e.code}]` : ""}`);
      setRows([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => { load(); }, []);

  // debounce ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ 300ms (‡πÄ‡∏î‡∏¥‡∏°)
  useEffect(() => {
    const t = setTimeout(() => load(q), 300);
    return () => clearTimeout(t);
  }, [q]);

  const onManualSearch = () => load(q);
  const onClear = () => { setQ(""); load(""); };

  // üü¢ NEW: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤
  const onCreate = async (e) => {
    e.preventDefault();
    try {
      // ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á backend: POST /tenants  ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö { name, phone, room_id, checkin_date }
      await tenantApi.create({
        name: createForm.name.trim(),
        phone: createForm.phone.trim() || null,
        room_id: createForm.room_id.trim(),
        checkin_date: createForm.checkin_date || null,
      });
      setShowCreate(false);
      setCreateForm({ name: "", phone: "", room_id: "", checkin_date: "" });
      await load(q);
    } catch (e2) {
      alert(e2.message || "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  };

  // üü¢ NEW: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡πÄ‡∏õ‡∏¥‡∏î editor ‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
  const startEdit = (r) => {
    setEditing(r); // ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ñ‡∏ß
    setEditForm({
      name: r.name || "",
      phone: r.phone || "",
      room_id: r.room_id || "",
      checkin_date: formatDate(r.checkin_date) || "",
    });
  };

 const saveEdit = async () => {
  if (!editing) return;
  try {
    await tenantApi.update(editing.tenant_id, {
      name: editForm.name.trim(),
      phone: editForm.phone.trim() || null,
      room_id: editForm.room_id === "" ? null : editForm.room_id,
      checkin_date: editForm.checkin_date || null,
    });
    setEditing(null); // ‡∏õ‡∏¥‡∏î editor
    await load(q);    // ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
  } catch (e) {
    alert(e?.response?.data?.error || e.message);
  }
};


  // üü¢ NEW: ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤
  const onDelete = async (r) => {
    if (!window.confirm(`‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤ ${r.tenant_code || r.tenant_id}?`)) return;
    try {
      await tenantApi.remove(r.tenant_id);
      await load(q);
    } catch (e) {
      alert(e.message || "‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  };

  return (
    <div>
      {/* Header (‡πÄ‡∏î‡∏¥‡∏°) */}
      <div className="ad-header">
        <h2 style={{ margin: 0 }}>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤</h2>
        <div style={{ display: "flex", gap: 8 }}>
          <input
            className="input"
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô T0001) ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤"
            value={q}
            onChange={(e) => setQ(e.target.value)}
          />
          <button className="btn btn-outline" onClick={onManualSearch}>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</button>
          <button className="btn btn-outline" onClick={onClear}>‡∏•‡πâ‡∏≤‡∏á</button>

          {/* üü¢ NEW: ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á */}
          <button className="btn btn-primary" onClick={() => setShowCreate(v => !v)}>
            {showCreate ? "‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤"}
          </button>
        </div>
      </div>

      {/* üü¢ NEW: ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤ */}
      {showCreate && (
        <div className="ad-panel" style={{ marginTop: 12 }}>
          <form onSubmit={onCreate}>
            <div style={{ display: "grid", gridTemplateColumns: "repeat(auto-fit,minmax(180px,1fr))", gap: 8 }}>
              <div>
                <label className="label">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤*</label>
                <input
                  className="input"
                  required
                  value={createForm.name}
                  onChange={(e) => setCreateForm(p => ({ ...p, name: e.target.value }))}
                />
              </div>
              <div>
                <label className="label">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</label>
                <input
                  className="input"
                  value={createForm.phone}
                  onChange={(e) => setCreateForm(p => ({ ...p, phone: e.target.value }))}
                />
              </div>
              <div>
                <label className="label">‡πÑ‡∏≠‡∏î‡∏µ‡∏´‡πâ‡∏≠‡∏á*</label>
                <input
                  className="input"
                  required
                  value={createForm.room_id}
                  onChange={(e) => setCreateForm(p => ({ ...p, room_id: e.target.value }))}
                />
              </div>
              <div>
                <label className="label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å</label>
                <input
                  className="input"
                  type="date"
                  value={createForm.checkin_date}
                  onChange={(e) => setCreateForm(p => ({ ...p, checkin_date: e.target.value }))}
                />
              </div>
            </div>
            <div style={{ display: "flex", gap: 8, marginTop: 10 }}>
              <button type="button" className="btn" onClick={() => setShowCreate(false)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
              <button className="btn btn-primary">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            </div>
          </form>
        </div>
      )}

      {/* Table (‡πÄ‡∏î‡∏¥‡∏° + ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç inline) */}
      <div className="ad-panel" style={{ marginTop: 12 }}>
        <div style={{ overflowX: "auto" }}>
          <table className="table">
            <thead>
              <tr>
                <th>#</th>
                <th>ID ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤</th>
                <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤</th>
                <th>‡πÑ‡∏≠‡∏î‡∏µ‡∏´‡πâ‡∏≠‡∏á</th>
                <th>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</th>
                <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å</th>
                <th style={{ minWidth: 180 }}>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
              </tr>
            </thead>
            <tbody>
              {loading ? (
                <tr><td colSpan="7">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</td></tr>
              ) : rows.length === 0 ? (
                <tr><td colSpan="7">{err ? "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" : "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</td></tr>
              ) : (
                rows.map((r, idx) => {
                  const isEdit = editing?.tenant_id === r.tenant_id;
                  return (
                    <React.Fragment key={r.tenant_code || r.tenant_id}>
                      <tr>
                        <td>{idx + 1}</td>
                        <td>{r.tenant_code || r.tenant_id}</td>
                        <td>{r.name}</td>
                        <td>{r.room_id}</td>
                        <td>{r.phone || "-"}</td>
                        <td>{formatDate(r.checkin_date)}</td>
                        <td style={{ display: "flex", gap: 8 }}>
                          <button className="btn btn-warning" onClick={() => startEdit(r)}>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                          <button className="btn btn-danger" onClick={() => onDelete(r)}>‡∏•‡∏ö</button>
                        </td>
                      </tr>

                      {/* üü¢ NEW: ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç inline */}
                      {isEdit && (
                        <tr>
                          <td colSpan="7">
                            <div className="ad-panel" style={{ marginTop: 10 }}>
                              <div style={{ display: "grid", gridTemplateColumns: "repeat(auto-fit,minmax(180px,1fr))", gap: 8 }}>
                                <div>
                                  <label className="label">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤</label>
                                  <input
                                    className="input"
                                    value={editForm.name}
                                    onChange={(e) => setEditForm(p => ({ ...p, name: e.target.value }))}
                                  />
                                </div>
                                <div>
                                  <label className="label">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</label>
                                  <input
                                    className="input"
                                    value={editForm.phone}
                                    onChange={(e) => setEditForm(p => ({ ...p, phone: e.target.value }))}
                                  />
                                </div>
                                <div>
                                  <label className="label">‡πÑ‡∏≠‡∏î‡∏µ‡∏´‡πâ‡∏≠‡∏á</label>
                                  <input
                                    className="input"
                                    value={editForm.room_id}
                                    onChange={(e) => setEditForm(p => ({ ...p, room_id: e.target.value }))}
                                  />
                                </div>
                                <div>
                                  <label className="label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å</label>
                                  <input
                                    className="input"
                                    type="date"
                                    value={editForm.checkin_date}
                                    onChange={(e) => setEditForm(p => ({ ...p, checkin_date: e.target.value }))}
                                  />
                                </div>
                              </div>
                              <div style={{ display: "flex", gap: 8, marginTop: 10 }}>
                                <button className="btn" onClick={() => setEditing(null)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                                <button className="btn btn-primary" onClick={saveEdit}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                              </div>
                            </div>
                          </td>
                        </tr>
                      )}
                    </React.Fragment>
                  );
                })
              )}
            </tbody>
          </table>
        </div>

        {err && (
          <div className="ad-panel" style={{ marginTop: 12, background: "#ffecec", borderColor: "#f5a5a5" }}>
            {err}
          </div>
        )}
      </div>
    </div>
  );
}
